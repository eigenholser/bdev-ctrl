#!/bin/bash

. /sbin/bdev-functions

backup_one () {
    # This shell script intended to take top-level directories. Keep it simple.
    backupdir=$1
    if [ -z $backupdir ]; then
        error "Backup directory required."
        return
    fi

    excludes_file="${BACKUP_HOME}/excludes-${backupdir}.txt"

    if [ ! -e $excludes_file ]; then
        error "Missing exclude file $excludes_file"
        exit 1
    fi

    if [ ! -d $BACKUP_DEST ]; then
        error "Destination $BACKUP_DEST does not exist!"
        exit 1
    fi

    output "Changing directory: $BACKUP_DEST"

    restore_dir=`pwd`
    cd $BACKUP_DEST

    rsync_cmd="/usr/bin/rsync"
    rsync_opts="-a -v --delete --progress --human-readable --delete-excluded"
    rsync_opts="${rsync_opts} --exclude-from=${excludes_file}"

    if [ ! -z $BDEV_TEST ]; then
        rsync_opts="${rsync_opts} --dry-run"
    fi

    backup_cmd="${rsync_cmd} ${rsync_opts} /${backupdir} ."

    output "${backup_cmd}"
    $backup_cmd

    cd $restore_dir
}

backup_admin () {
    timestamp=`date "+%Y%m%d-%H%M%S"`

    while IFS=':' read -ra DIRS; do
        for admin_dir in "${DIRS[@]}"; do
            echo $admin_dir
            # Remove leading / then map / ==> - and \S ==> _
            munged_admin_dir=`echo $admin_dir | \
                sed -e 's#/##' -e 's#/#-#g' -e 's#\\\\##g' -e 's/ /_/g'`
            echo $munged_admin_dir
            tar_file="${timestamp}_${munged_admin_dir}.tar.gz"
            tar_cmd="tar zcvf ${tar_file} ${admin_dir}"
            message "$tar_cmd"
            restore_dir=`pwd`
            cd /$BDEV_UNNAMED_MOUNT
            tar zcvf $tar_file "$admin_dir"
            cd $restore_dir
        done
    done <<< "$BACKUP_ADMIN_DIRS"
}

backup_master () {
    BACKUP_ROOTS=$1

    # Check to see if $BDEV_NAMED_MASTER  mounted. This is important!
    mount | grep -q $BDEV_NAMED_MASTER
    rc=$?
    if [ $rc = 1 ]; then
        error "Master backup device not mounted on /$BDEV_NAMED_MASTER!"
        exit 1
    fi

    while IFS=':' read -ra DIRS; do
        for backup_root in "${DIRS[@]}"; do
            # $BACKUP_DIR_VM defined and directory exists.
            # Strip leading /
            backup_root=`echo $backup_root | sed -e 's#/##'`
            if [ -z "$backup_root" ] | [ ! -d /$backup_root ]; then
                error "Backup directory not defined or does not exist: [$backup_root]"
                exit 1
            fi

            output "==> backup_one $backup_root"
            backup_one $backup_root
        done
    done <<< "$BACKUP_ROOTS"
}

# Run only as root.
require_root

# Command line option
backup_mode=$1

case $backup_mode in
    "admin")
        output $backup_mode;
        backup_admin;;
    "all")
        output $backup_mode;
        backup_master "${BACKUP_DIRS}";;
    *)
        output "novm";
        backup_master "${BACKUP_DIRS_NOVM}";;
esac

# So we know when long running jobs complete.
date

