#!/bin/bash

. /sbin/bdev-functions

require_root

# Environment variable validation.
# Default these values.
if [ -z $BDEV_NAMED_MASTER ]; then
    BDEV_NAMED_MASTER=master
fi

if [ -z $BDEV_NAMED_SLAVE ]; then
    BDEV_NAMED_SLAVE=slave
fi

if [ -z $BDEV_UNNAMED_MOUNT ]; then
    BDEV_UNNAMED_MOUNT=admin
fi

if [ -z $BDEV_EXCLUDE_DEVICES ]; then
    BDEV_EXCLUDE_DEVICES='sda sdb'
fi

check_excluded_devices () {
    for item in $BDEV_EXCLUDE_DEVICES; do
        if [ $item == $backupdevicename ]; then
            error "Configuration excludes use of $backupdevicename!"
            exit 1
        fi
    done
}

check_bdev_common () {
    backupdevicename=$1

    if [ "X${backupdevicename}" == "X" ]; then
        error "Need a backup device."
        exit 1;
    fi

    if [ -z $BDEV_KEYFILES_PATH ]; then
        error "Environment variable BDEV_KEYFILES_PATH must be set."
        exit 1
    fi

    check_excluded_devices
}

crypt_mapper () {
    backupdevice=$1
    keyname=$2
    # TODO: Set the cipher to an environment variable?
    cryptsetup_args="--verbose"

    # If keyname supplied then use a keyfile.
    if [ ! -z $keyname ]; then
        cryptname=${keyname}_crypt
        keyfile="${BDEV_KEYFILES_PATH}/${keyname}.keyfile"
        cipherfile="${BDEV_KEYFILES_PATH}/${keyname}.cipher"

        if [ ! -f $keyfile ]; then
            error "No keyfile: $keyfile"
            exit 1
        fi

        if [ ! -f $cipherfile ]; then
            error "No cipherfile: $cipherfile"
            exit 1
        fi

        # Read cipher from file.
        cipher=`cat $cipherfile`

        message "Using keyfile: $keyfile"
        message "Using cipher: $cipher"

        cryptsetup_args="${cryptsetup_args} --key-file ${keyfile}"
        cryptsetup_args="${cryptsetup_args} --cipher $cipher"
    else
        # TODO: Crusty, need to iron this out.
        cryptname=${BDEV_UNNAMED_MOUNT}_crypt

        # Default cipher for unnamed device. We've nowhere to find it.
        cryptsetup_args="${cryptsetup_args} --cipher aes-cbc-essiv:sha256"
    fi

    cryptdevice=/dev/mapper/${cryptname}

    if [ -e ${cryptdevice} ]; then
        warning "${backupdevice} already attached to ${cryptname}"
        exit 1;
    fi

    output "Using cryptdevice=${cryptdevice}"

    # Create the encrypted mapping to the device.
    cryptsetup $cryptsetup_args create $cryptname $backupdevice
    kpartx -a $cryptdevice

    # TODO: error?

    # Race condition on some (fast) systems solved by a short sleep.
    sleep 0.5
}

crypt_unmapper () {
    cryptdevice=$1

    if [ -e $cryptdevice ]; then
        message "${cryptdevice} present. removing..."
        kpartx -d $cryptdevice
        cryptsetup --verbose remove $cryptdevice
    fi

    # TODO: Check success
    if [ -f $cryptdevice ]; then
        error "Failed to detach mapped device $cryptdevice"
        exit 1
    fi

    message "Successfully detached mapped device $cryptdevice"
}

bdev_attach () {
    backupdevicename=$1
    backupdevice=$2
    keyname=$3

    check_bdev_common $backupdevicename

    crypt_mapper $backupdevice $keyname

    kpartx -a $cryptdevice
}

bdev_up () {
    backupdevicename=$1
    backupdevice=/dev/$1
    backupdir=/$2
    keyname=$3

    check_bdev_common $backupdevicename

    # Check to see if mounted. Do not map if there is something on our
    # mountpoint.
    /bin/mountpoint $backupdir
    rc=$?

    if [ "$rc" -eq 1 ]; then
        message "Ready to mount $backupdir"

        if [ -z $keyname ]; then
            message "Attaching ${BDEV_UNNAMED_MOUNT} on ${backupdevice} and mounting on ${backupdir}"
            crypt_mapper $backupdevice
        else
            message "Attaching ${keyname} and mounting on ${backupdir}."
            crypt_mapper $backupdevice $keyname
        fi

        # TODO: Would be neat to combine this section for named and unnamed.
        # XXX: This command relies on $cryptdevice global being set in
        # crypt_mapper()
        # XXX: This accomodates the practice of not creating a partition and
        # instead, dedicating the device.
        if [ -e "${cryptdevice}1" ]; then
            cryptpartition="${cryptdevice}1"
        else
            cryptpartition=$cryptdevice
        fi

        output "Using cryptpartition=${cryptpartition}"

        fsck "${cryptpartition}"
        if [ "$?" -eq 0 ]; then
            mount $cryptpartition $backupdir
            rc=$?
            if [ "$rc" -ne 0 ]; then
                crypt_unmapper $cryptdevice
                error "Mount failed. Cause unknown."
                exit 1
            fi
        fi
    fi

    check_mount
}

bdev_down () {
    keyname=$1  # TODO: AKA bdev name? keyname is just bdev name? unnamed bdev is just BDEV_UNNAMED_MOUNT?
    cryptname=${keyname}_crypt;
    cryptdevice=/dev/mapper/$cryptname;

    # Have $cryptdevice. Use it to find the mountpoint.
    backupdir=$(find_mount_dir $cryptdevice)
    if [ "X${backupdir}" == "X" ]; then
        error "${cryptdevice} is not mounted."
        exit 1
    fi
    output "Found mountpoint $backupdir"

    # Check to see if mounted.
    /bin/mountpoint $backupdir
    rc=$?

    if [ "$rc" -eq 1 ]; then
        warning "$backupdir not mounted."
        crypt_unmapper $cryptdevice
        exit 0
    fi

    message "Unmounting device ${keyname} on ${backupdir}"
    umount $backupdir

    # Check to see if mounted.
    /bin/mountpoint $backupdir
    rc=$?

    if [ "$rc" -eq 1 ]; then
        message "${backupdir} unmounted."
    else
        error "${backupdir} not unmounted. Failed."
        exit 1
    fi

    if [ -e $cryptdevice ]; then
        crypt_unmapper $cryptdevice
    fi
}

# Check again--'cuz we may have entered the wrong encryption key. No filesystem
# will be recognized and no mount will be performed if the key is incorrect.
check_mount () {
    /bin/mountpoint $backupdir
    rc=$?

    if [ "$rc" -eq 1 ]; then
        error "Mount failed. Your encryption key is probably incorrect."

        # Attempt to remove mapping. We should have $cryptdevice global set at
        # this point.
        crypt_unmapper $cryptdevice

        exit 1
    fi
}

# Takes $cryptdevice as argument and returns a mountpoint.
find_mount_dir () {
    cryptdevice=$1
    local backupdir=`/bin/mount | grep $cryptdevice | awk '{print $3}'`
    # XXX: Don't forget--must remain echo.
    echo $backupdir
}

usage () {
    echo "Usage: `basename $0` [command] [blockdevicename] [bdevname]         "
    echo "  e.g.                                                              "
    echo "     % $0 ${BDEV_NAMED_MASTER} sdc bd-0                             "
    echo "     % $0 ${BDEV_NAMED_SLAVE} sdc bd-0                              "
    echo "     % $0 ${BDEV_UNNAMED_MOUNT} sdc                                 "
    echo "     % $0 down bd-0                                                 "
    echo "     % $0 attach sdc                                                "
    echo "     % $0 detach sdc                                                "
    echo
    echo "  Command:                                                          "
    echo "    ${BDEV_NAMED_MASTER}: Attach and mount device on /${BDEV_NAMED_MASTER}."
    echo
    echo "    ${BDEV_NAMED_SLAVE}: Attach and mount device on /${BDEV_NAMED_SLAVE}."
    echo
    echo "    ${BDEV_UNNAMED_MOUNT}: Attach and mount device on /${BDEV_UNNAMED_MOUNT}."
    echo
    echo "    down: Unmount and detach device."
    echo
    echo "    attach: Attach device."
    echo
    echo "    detach: Detach device."
    echo
}

# This is required for all variations.
cmd=$1

##
# Parse command.
##
case $cmd in
    "${BDEV_NAMED_MASTER}"|"${BDEV_NAMED_SLAVE}")
        output "Mount and attach device $keyname";
        backupdevicename=$2;
        keyname=$3;
        bdev_up $backupdevicename $cmd $keyname;;
    "${BDEV_UNNAMED_MOUNT}")
        output "Attach and mount device $backupdevicename";
        backupdevicename=$2;
        if [ "X$backupdevicename" == "X" ]; then
            error "Missing device name."
            exit 1
        fi
        bdev_up $backupdevicename $cmd;;
    "down")
        # Check for arg $2. If present, use keyname. Otherwise, use `admin'.
        keyname=$2;
        if [ "X$keyname" == "X" ]; then
            output "Unmount unnamed device mounted on /${BDEV_UNNAMED_MOUNT}.";
            bdev_down $BDEV_UNNAMED_MOUNT;
        else
            output "Unmount and detach named device $keyname";
            bdev_down $keyname;
        fi;;
    "attach")
        backupdevicename=$2;
        backupdevice=/dev/${2};
        keyname=$3;
        if [ "X$keyname" == "X" ]; then
            bdev_attach $backupdevicename $backupdevice;
        else
            output "Attach device $keyname";
            bdev_attach $backupdevicename $backupdevice $keyname;
        fi;;
    "detach")
        keyname=$2;
        if [ "X${keyname}" == "X" ]; then
            output "Detach unnamed device.";
            cryptname=${BDEV_UNNAMED_MOUNT}_crypt;
        else
            output "Detach named device $keyname";
            cryptname=${keyname}_crypt;
        fi
        cryptdevice=/dev/mapper/$cryptname;
        crypt_unmapper $cryptdevice;;
    *)
        usage
        exit 0;;
esac

exit 0

